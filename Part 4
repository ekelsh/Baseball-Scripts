#################################################
# Chapter 4 - The Relation Between Runs and Wins
# 
# Use Lahman's database data
#        
#
#################################################

# Section 4.2  The Teams Table in Lahman's Database

teams <- read.csv("lahman/teams.csv")
tail(Teams)   #returns last 6 rows from Teams table

myteams <- subset(Teams, yearID > 2000)[ , c("teamID", "yearID",
  "lgID", "G", "W", "L", "R", "RA")]
#format to concat only certain columns into a subsetted table...
#fangraphsubset <- subset(fangraphs[c("Name", "Team", "WAR", "Clutch")])
tail(myteams)

myteams$RD <- with(myteams, R - RA)
myteams$Wpct <- with(myteams, W / (W + L))

plot(myteams$RD, myteams$Wpct,
  xlab="run differential",
  ylab="winning percentage")

# Section 4.3 Linear Regression

linfit <- lm(Wpct ~ RD, data=myteams)

abline(a=coef(linfit)[1], b=coef(linfit)[2], lwd=3)
#a and b = intercept and slope
#coef = gives BOTH slope and intercept
#linfit = previously made linear regression model (simple)
#lwd specifies line thickness

myteams$linWpct <- predict(linfit)
#predicts Win% based on the simple regression we just made (Wpct as a function of RD)
#adds predicted values to myteams table

myteams$linResiduals <- residuals(linfit)
#calculates the residuals from the simple regression we just made (Wpct as a function of RD)
#adds residual values to myteams table

plot(myteams$RD, myteams$linResiduals,
  xlab="run differential",
  ylab="residual")
#plots RD on x axis vs Residuals on y axis
abline(h=0, lty=3)
#draws a horizontal line through the y-intercept of 0 (change to v for vertical line)
#gives line a thickness of 3
points(c(68, 88), c(.0749, -.0733), pch=19)
#highlights the 2 x,y coordinate points of 68,.0749 and 88,-.0733
#gives points thickness of 19
text(68, .0749, "LAA '08", pos=4, cex=.8)
#puts the text "LAA 08" at the x,y coordinate 68,.0749
text(88, -.0733, "CLE '06", pos=4, cex=.8)
#puts the text "CLE 06" at the x,y coordinate 88,-.0733

mean(myteams$linResiduals)

linRMSE <- sqrt(mean(myteams$linResiduals ^ 2))
linRMSE

nrow(subset(myteams, abs(linResiduals) < linRMSE)) /
  nrow(myteams)
#number of rows in subset of myteams table....
nrow(subset(myteams, abs(linResiduals) < 2 * linRMSE)) /
  nrow(myteams)


# Section 4.4 The Pythagorean Formula for Winning Percentage

myteams$pytWpct <- with(myteams, R ^ 2 / (R ^ 2 + RA ^ 2))
#new column to myteams table (pythagorean win%)
#Runs2/(Runs2 + RA2)

myteams$pytResiduals <- with(myteams, Wpct-pytWpct)
sqrt(mean(myteams$pytResiduals ^ 2))
#new column to myteams table (pythagorean residual)

# Section 4.5  The Exponent in the Pythagorean Formula

myteams$logWratio <- log(myteams$W / myteams$L)
#log of win ratio as new variable in myteams table
myteams$logRratio <- log(myteams$R / myteams$RA)
#log of run ratio as new variable in myteams table
pytFit <- lm(logWratio ~ 0 + logRratio, data=myteams)
#linear reg model = logWratio as fxn of logRratio
summary(pytFit)

# Section 4.6  Good and Bad Predictions by the Pythagorean Formula

gl2011 <- read.table("gl2011.txt", sep=",")
glheaders <- read.csv("game_log_header.csv")
names(fangraphs) <- names(fg)   #????

KClub <- subset(fangraphs, "K/9" >= 10 | Clutch >= 0)[
  , c("Name", "Team", "FB_perc_1", "SL_perc", "FBv", "SLv", "wFB", "wSL", "FA-X", "SL-X", "FA-Z", "SL-Z")]
#makes a subset table w/ 2 conditions and only PitchFX data
head(KClub)

KClub$velodiff <- KClub$FBv - KClub$SLv
KClub$wdiff <- KClub$wFB- KClub$wSL[na.rm = TRUE]
KClub$FBtunnel <- KClub$`FA-X` - KClub$`SL-X`[na.rm=TRUE]
KClub$SLtunnel <- KClub$`FA-Z` - KClub$`SL-Z`[na.rm=TRUE]

fangraphs$velodiff <- fangraphs$FBv - fangraphs$SLv
#variable for velocity diff between FB and SL
fangraphs$wdiff <- fangraphs$wFB- fangraphs$wSL[na.rm = TRUE]
#variable for effectiveness diff between FB and SL
fangraphs$Xtunnel <- fangraphs$`FA-X` - fangraphs$`SL-X`[na.rm=TRUE]
#variable for X tunnel diff between FB and SL
fangraphs$Ztunnel <- fangraphs$`FA-Z` - fangraphs$`SL-Z`[na.rm=TRUE]
#variable for Z tunnel diff between FB and SL

fbsl2018 <- fangraphs[,c("Name", "Team", "velodiff", "wdiff",
  "Xtunnel", "Ztunnel")]

fbsl2018$fbbetter <- ifelse(fbsl2018$wdiff >
   0, 1, 0)[na.rm = TRUE]
#creates dummy variable of 1 if FB better pitch
fbsl2018$slbetter <- ifelse(fbsl2018$wdiff <
   0, 1, 0)[na.rm = TRUE]
#creates dummy variable of 1 if SL better pitch

betterFBpitchers <- subset(fbsl2018, fbbetter == 1)
betterSLpitchers <- subset(fbsl2018, slbetter == 1)
#creates subsets for pitchers based on their better pitch (FB v SL)

HELLO <- merge(betterFBpitchers, KClub)
GOODBYE <- merge(betterSLpitchers, KClub)
#merges tables

plot(fangraphs$WAR, fangraphs$Xtunnel,
  xlab="WAR",
  ylab="X Tunnel")

plot(fangraphs$WAR, fangraphs$Ztunnel,
     xlab="WAR",
     ylab="Z Tunnel")

identify(fangraphs$WAR, fangraphs$Xtunnel,
  labels=fangraphs$Name)

identify(fangraphs$WAR, fangraphs$Ztunnel,
         labels=fangraphs$Name)
  #...identify data points by mouse-clickin on the plot
  #...then press ESC to finish

pit <- read.csv("lahman/pitching.csv")

top_closers <- subset(Pitching, GF > 50 & ERA < 2.5)[ ,c("playerID",
  "yearID", "teamID")]
#creates new subsetted table of the top closers

teams_top_closers <- merge(myteams, top_closers)
#merges the myteams table w/ the new top_closers table

summary(teams_top_closers$pytResiduals)
#min, max, Q1, Q3, median, and mean for pytResiduals

# Section 4.7  How Many Runs for a Win?

D(expression(G * R ^ 2 / (R ^ 2 + RA ^ 2)), "R")
#????

IR <- function(RS=5, RA=5){
  round((RS ^ 2 + RA ^ 2)^2 / (2 * RS * RA ^ 2), 1)
}
#creates fxn named IR
#1st number acts as RS...2nd number acts as RA
#inputs those variables into the above formula

IRtable <- expand.grid(RS=seq(3, 6, .5), RA=seq(3, 6, .5))
#expand.grid creates a new data frame
#variables in new data frame = RS and RA
#RS and RA will start at 3, end at 6, and will +/- by 0.5
#all possible combos of the 7 (each) values will be input into the new data frame

rbind(head(IRtable), tail(IRtable))
#returns the top 6 rows in the table + bottom 6 rows in the table

IRtable$IRW <- IR(IRtable$RS, IRtable$RA)
#creates new IRW variable in the IRtable
#utilizes the newly created IR fxn w/ the RS and RA variables

xtabs(IRW ~ RS + RA, data=IRtable)
#creates contingency table from the IRtable
#IRW as a function of RS+RA

################################################
